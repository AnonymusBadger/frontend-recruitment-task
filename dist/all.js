!function(){"use strict";document.addEventListener("DOMContentLoaded",()=>{const e=document.querySelectorAll(".modal");e.forEach(e=>{{var t=e;const o=document.querySelector(`[data-target="#${t.id}"]`),r=t.querySelectorAll("[data-dismiss=modal]"),n=t.querySelector(".modal__content"),s=e=>{n.contains(e.target)||a()},d=()=>{t.style.display="block",setTimeout(()=>{t.classList.add("show")},150),document.body.classList.add("stop-scroll"),document.addEventListener("click",s),t.focus()},a=()=>{t.classList.remove("show"),setTimeout(()=>{t.style.display="none"},150),document.body.classList.remove("stop-scroll"),document.removeEventListener("click",s),o.focus()};return o.addEventListener("click",e=>{e.stopPropagation(),d()}),r.forEach(e=>{e.addEventListener("click",()=>{a()})}),d,a,o,void r}})});const a={saveValue:(e,t)=>{sessionStorage.setItem(e,JSON.stringify(t))},getValue:e=>JSON.parse(sessionStorage.getItem(e)),remove:e=>{sessionStorage.removeItem(e)},clear:()=>{sessionStorage.clear()}},r=(e=null,t=!0)=>{const o=((e=null,t=!0)=>{if(null==e&&t)throw new Error("Missing ID for Count data persistence! Set persistence to false or add ID");let o=t&&a.getValue("count-"+e)||0;const r=[];const n=()=>{r.forEach(e=>{e.notify(o)})},s=()=>{t&&a.saveValue("count-"+e,o)};return{up:()=>{o++,n(),s()},down:()=>{o--,n(),s()},reset:()=>{o=0,n(),s()},addObserver:e=>{r.push(e)},removeObserver:e=>{e=r.indexOf(e);-1<e&&r.splice(e,1)},notify:n,get count(){return o}}})(e,t);var r,t=document.querySelector(`[data-counter-id="${e}"][data-counter-type=display]`);const n=document.querySelector(`[data-counter-id="${e}"][data-counter-type=up]`),s=document.querySelector(`[data-counter-id="${e}"][data-counter-type=down]`),d=document.querySelector(`[data-counter-id="${e}"][data-counter-type=reset]`);return n&&n.addEventListener("click",()=>{o.up()}),s&&s.addEventListener("click",()=>{o.down()}),d&&d.addEventListener("click",()=>{o.reset()}),t&&(r=t,e=e=>{r.innerHTML=e},o.addObserver({update:e,notify:e}),o.notify()),{addButton:n,subtractButton:s,resetButton:d,notify:o.notify,addObserver:o.addObserver,removeObserver:o.removeObserver}};document.addEventListener("DOMContentLoaded",()=>{const e=document.querySelectorAll(".task-module");e.forEach(e=>{e=e.getAttribute("data-counter-id");const t=r(e);o=e=>{setTimeout(()=>{5<e?t.resetButton.classList.remove("d-none"):t.resetButton.classList.add("d-none")},200)};var o,e={notify:e=>{o(e)}};t.addObserver(e),t.notify()})})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
